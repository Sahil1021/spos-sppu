import java.io.*;
import java.util.*;

class optimalPR {
    // Function to check whether a page exist in a frame or not
    static boolean search(int key, int fr[])
    {
        for (int i = 0; i < fr.length; i++)
            if (fr[i] == key)
                return true;
        return false;
    }
    // Function to find the frame that will not be used recently in future after given index in pg[0..pn-1]
    static int predict(int input[], int[] fr, int n,
                       int index)
    {
        // Store the index of pages which are going to be used recently in future
        int res = -1, farthest = index;
        for (int i = 0; i < fr.length; i++) {
            int j;
            for (j = index; j < n; j++) {
                if (fr[i] == input[j]) {
                    if (j > farthest) {
                        farthest = j;
                        res = i;
                    }
                    break;
                }
            }
            // If a page is never referenced in future, return it.
            if (j == n)
                return i;
        }

        // If all of the frames were not in future return any of them, we return 0. Otherwise we return res.
        return (res == -1) ? 0 : res;
    }
    static void optimalPage(int input[], int n, int f)
    {
        // Create an array for given number of
        // frames and initialize it as empty.
        int[] fr = new int[f];

        // Traverse through page reference array
        // and check for miss and hit.
        int hit = 0;
        int index = 0;
        for (int i = 0; i < n; i++) {


            // Page found in a frame : HIT
            if (search(input[i], fr)) {
                hit++;
                continue;
            }
            // Page not found in a frame : MISS
            // If there is space available in frames.
            if (index < f)
                fr[index++] = input[i];

                // Find the page to be replaced.
            else {
                int j = predict(input, fr, n, i + 1);
                fr[j] = input[i];
            }
        }
        System.out.println("No. of hits = " + hit);
        System.out.println("No. of page fault = " + (n - hit));
    }

    public static void main(String[] args)
    {
        int input[]
                = { 7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2 };
        int n = input.length;
        int f = 4;
        optimalPage(input, n, f);
    }
}